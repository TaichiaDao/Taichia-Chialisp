;This is a puzzle for persisting a Key-Value list efficiently
;It protects a list of key-value pairs by two private keys
;This puzzle is used in many services as a fundamental function. We use this puzzle persists DAO, Metadata and Vote information on the blockchain
(mod
  (
    ;Pubkey for updating the KV pairs, generated by the platform
    PLATFORM_PUBKEY
    ; Pubkey owned by the DAO. This is optional, if it is 0 then DAO doesn't need to sign while updating the data.
    ; This is used for DAOs which have a strong security requirement
    DAO_PUBKEY
    ;Name of this KV list
    NAME
    ; Type of the metadata
    TYPE
    ;KV pairs list in format [(key1 , val1), (key2, val2), ...]
    kv_list
    ; current amount
    my_amount
    ;Platform wallet
    platform_puzhash
    ; Fee charged by the platform
    fee
    ; Current coin ID
    my_id
  )
  (include "condition_codes.clib")
  (include "sha256tree.clib")

  (defun get_conditions (PLATFORM_PUBKEY platform_puzhash kv_list my_amount fee my_id)
    (if fee
      (list
        (list ASSERT_MY_AMOUNT my_amount)
        (list ASSERT_MY_COIN_ID my_id)
        (list AGG_SIG_UNSAFE PLATFORM_PUBKEY (sha256 my_id platform_puzhash (sha256tree kv_list) fee))
        (list RESERVE_FEE (- my_amount fee))
        (list CREATE_COIN platform_puzhash fee)
      )
      (list
        (list ASSERT_MY_AMOUNT my_amount)
        (list ASSERT_MY_COIN_ID my_id)
        (list AGG_SIG_UNSAFE PLATFORM_PUBKEY (sha256 my_id platform_puzhash (sha256tree kv_list) fee))
        (list RESERVE_FEE (- my_amount fee))
      )
    )
  )
  ;Main
  (if DAO_PUBKEY
    (c
      (list AGG_SIG_UNSAFE DAO_PUBKEY (sha256 (sha256tree kv_list) fee))
      (get_conditions PLATFORM_PUBKEY platform_puzhash kv_list my_amount fee my_id)
    )
    (get_conditions PLATFORM_PUBKEY platform_puzhash kv_list my_amount fee my_id)
  )
)
